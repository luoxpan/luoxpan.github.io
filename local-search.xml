<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CPP困惑系列2-内存对齐、空类、多态</title>
    <link href="/2023/03/25/CPP%E5%9B%B0%E6%83%91%E7%B3%BB%E5%88%972-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E3%80%81%E7%A9%BA%E7%B1%BB%E3%80%81%E5%A4%9A%E6%80%81/"/>
    <url>/2023/03/25/CPP%E5%9B%B0%E6%83%91%E7%B3%BB%E5%88%972-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90%E3%80%81%E7%A9%BA%E7%B1%BB%E3%80%81%E5%A4%9A%E6%80%81/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="内存对齐"><a href="#内存对齐" class="headerlink" title="内存对齐"></a>内存对齐</h2><h3 id="内存对齐的原因"><a href="#内存对齐的原因" class="headerlink" title="内存对齐的原因"></a>内存对齐的原因</h3><ul><li>一部分原因是某些硬件平台对特定的数据只能从特定地址开始存取。</li><li>根本原因在于字节对齐可以提高CPU访问数据的效率。例如，一个int数据如果不按字节对齐，就会出现为了读取一个数据，需要CPU访问两次内存的情况，CPU访问内存所花费的时间是远远大于计算的，显然不按字节存取会造成CPU性能瓶颈</li></ul><h3 id="对齐原则"><a href="#对齐原则" class="headerlink" title="对齐原则"></a>对齐原则</h3><h4 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h4><p>基本类型要求起始地址是其长度的整数倍。</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-built_in">short</span> a;<span class="hljs-comment">//占据内存[0,1]</span><br><span class="hljs-built_in">int</span> b;<span class="hljs-comment">//占据内存[4,5,6,7].地址2,3不可用,</span><br><span class="hljs-comment">//因为int要按4对齐,要求起始地址%4==0</span><br>&#125;;<br>sizeof(A)=<span class="hljs-number">8</span>;<br></code></pre></td></tr></table></figure><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>第一个元素按照基本类型或结构体的对齐原则对齐后，后面的元素连续存放即可</p><h4 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h4><p>不指定对齐方式的情况</p><ul><li>每个元素单独按照自身长度进行对齐</li><li>整体按照元素最大长度进行对齐</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-meta">#include &lt;iostream&gt;</span><br><span class="hljs-comment">//short: 2 int: 4 long: 8</span><br><span class="hljs-keyword">struct</span> A&#123;<br><span class="hljs-built_in">short</span> a;<span class="hljs-comment">//[0,1]</span><br><span class="hljs-built_in">int</span> b;<span class="hljs-comment">//[4..7]</span><br><span class="hljs-built_in">short</span> c;<span class="hljs-comment">//[8,9]</span><br>&#125;;<span class="hljs-comment">//12,因为10不是4的倍数，故填充至12（这里的10来源：地址0到9有10位）</span><br><br><span class="hljs-keyword">struct</span> B&#123;<br><span class="hljs-built_in">short</span> a;<span class="hljs-comment">//[0,1]</span><br><span class="hljs-built_in">short</span> b;<span class="hljs-comment">//[2,3]</span><br><span class="hljs-built_in">int</span> c;<span class="hljs-comment">//[4..7]</span><br>&#125;;<span class="hljs-comment">//8//8是4的倍数，不用填充</span><br><br><span class="hljs-keyword">struct</span> C&#123;<br><span class="hljs-built_in">int</span> a;<span class="hljs-comment">//[0..3]</span><br><span class="hljs-built_in">short</span> b;<span class="hljs-comment">//[4,5]</span><br><span class="hljs-built_in">short</span> c;<span class="hljs-comment">//[6,7]</span><br>&#125;;<span class="hljs-comment">//8//8是4的倍数，不用填充</span><br><br><span class="hljs-keyword">struct</span> D&#123;<br><span class="hljs-built_in">short</span> a;<span class="hljs-comment">//[0,1]</span><br><span class="hljs-built_in">long</span> b;<span class="hljs-comment">//[8..15]</span><br><span class="hljs-built_in">short</span> c;<span class="hljs-comment">//[16,17]</span><br><span class="hljs-built_in">int</span> d;<span class="hljs-comment">//[20..23]</span><br>&#125;;<span class="hljs-comment">//24//24是8的倍数，不用填充</span><br><br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">main</span>()</span>&#123;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-title">std</span>;<br>cout&lt;&lt;<span class="hljs-string">&quot;short: &quot;</span>&lt;&lt;<span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">short</span>)&lt;&lt;<span class="hljs-string">&quot; int: &quot;</span>&lt;&lt;<span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">int</span>)<br>&lt;&lt;<span class="hljs-string">&quot; long: &quot;</span>&lt;&lt;<span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">long</span>)&lt;&lt;endl;<br>cout&lt;&lt;<span class="hljs-string">&quot;A: &quot;</span>&lt;&lt;<span class="hljs-keyword">sizeof</span>(A)&lt;&lt;<span class="hljs-string">&quot; B: &quot;</span>&lt;&lt;<span class="hljs-keyword">sizeof</span>(B)&lt;&lt;<span class="hljs-string">&quot; C: &quot;</span><br>&lt;&lt;<span class="hljs-keyword">sizeof</span>(C)&lt;&lt;<span class="hljs-string">&quot; D: &quot;</span>&lt;&lt;<span class="hljs-keyword">sizeof</span>(D)&lt;&lt;endl;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XingpanLuo/PictureBed/BlogImag202303252043199.png" alt="image-20230325204358151"></p><h4 id="联合体"><a href="#联合体" class="headerlink" title="联合体"></a>联合体</h4><ul><li>联合体内存要求至少为最长元素的长度</li><li>同时，内存大小必须为所有成员的整数倍</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-meta">#include &lt;iostream&gt;</span><br><br>union A&#123;<br><span class="hljs-built_in">char</span> a;<br><span class="hljs-built_in">int</span> b[<span class="hljs-number">3</span>];<br><span class="hljs-built_in">long</span> c;<br>&#125;;<br><span class="hljs-comment">/*结果为16.首先A至少为12，因为3个int长度为12，其次长度必须为8的倍数，因为long的长度为8。故最终结果为16</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">main</span>()</span>&#123;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-title">std</span>;<br>cout&lt;&lt;<span class="hljs-string">&quot;short: &quot;</span>&lt;&lt;<span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">short</span>)&lt;&lt;<span class="hljs-string">&quot; int: &quot;</span>&lt;&lt;<span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">int</span>)<br>&lt;&lt;<span class="hljs-string">&quot; long: &quot;</span>&lt;&lt;<span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">long</span>)&lt;&lt;endl;<br>cout&lt;&lt;<span class="hljs-string">&quot;A: &quot;</span>&lt;&lt;<span class="hljs-keyword">sizeof</span>(A)&lt;&lt;endl;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XingpanLuo/PictureBed/BlogImag202303252044239.png" alt="image-20230325204433214"></p><h4 id="指定对齐方式"><a href="#指定对齐方式" class="headerlink" title="指定对齐方式"></a>指定对齐方式</h4><p>使用<code>#pragma pack(n)</code> 指定对齐方式。</p><p>当指定对齐方式时，上述的各种类型的对齐字节为自身对齐值与指定对齐值中的较小值。</p><p>对于结构体和联合体，整体的大小仍然是去正常分析的情况与指定的方式取较小值。</p><p>例子1： </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-type">short</span> a;<br><span class="hljs-type">int</span> b;<br><span class="hljs-type">short</span> c;<br>&#125;;<br><span class="hljs-comment">//如果没有指定以2对齐，sizeof(A)=12</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> pack(2)</span><br><span class="hljs-comment">//指定为2对齐，结果为2+4+2=8</span><br></code></pre></td></tr></table></figure><p>例子2：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">C</span>&#123;<br><span class="hljs-type">int</span> a;<br><span class="hljs-type">short</span> b;<br><span class="hljs-type">long</span> c;<br><span class="hljs-type">char</span> d[<span class="hljs-number">2</span>];<br>&#125;;<br><span class="hljs-comment">//正常分析的结果为 4+2+(2)+8+2+(6)=24 .(2)为short b后填充的，(6)为整体填充的，为了结果对8整除</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> pack(4)</span><br><span class="hljs-comment">//指定为4对齐，则结果为4+2+(2)+8+2+(2)=20. 因为min&#123;8,4&#125;=4,故整体只要为4的倍数就可以了</span><br><br></code></pre></td></tr></table></figure><h2 id="空类"><a href="#空类" class="headerlink" title="空类"></a>空类</h2><div class="note note-info">            <p>我觉得这是一个很无聊的问题，这个问题再stack overflow上的讨论争论也比较大。</p><p>以下是我觉得比较合理的问答。</p>          </div><p>空类的大小为1.</p><p>原因：以下三个原因其实是一个意思，只是表达方式不太同。</p><ul><li>为了确保两个不同对象的地址不同。</li><li>C++ 标准要求类型相同的两个对象地址必须不同。</li><li>发生这种情况的原因归结为正确实施标准，C++ 其中一条标准是“任何对象在内存中的地址都不应与任何其他变量相同”确保这一点的最简单方法是什么？确保所有类型都具有非零大小。为了实现这一点，编译器向没有数据成员和虚函数的结构和类添加一个虚拟字节，使它们的大小为 1 而不是 0，然后保证它们具有唯一的内存地址</li></ul><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CPP迷惑系列1-存储持续性、作用域、链接性</title>
    <link href="/2023/03/25/CPP%E8%BF%B7%E6%83%91%E7%B3%BB%E5%88%971-%E5%AD%98%E5%82%A8%E6%8C%81%E7%BB%AD%E6%80%A7%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E9%93%BE%E6%8E%A5%E6%80%A7/"/>
    <url>/2023/03/25/CPP%E8%BF%B7%E6%83%91%E7%B3%BB%E5%88%971-%E5%AD%98%E5%82%A8%E6%8C%81%E7%BB%AD%E6%80%A7%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E9%93%BE%E6%8E%A5%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="存储持续性"><a href="#存储持续性" class="headerlink" title="存储持续性"></a>存储持续性</h2><p>即变量再内存中的存在时间。C++中有三类存储持续性，C++11新增了一种。</p><ul><li>自动存储持续性：<ul><li>存储在栈区。进入代码块前存储，离开代码块就自动销毁</li><li>包括函数内部定义的局部变量和<code>register</code>修饰的寄存器变量</li><li><code>register</code>起初表示期望编译器将该变量存入寄存器以提高性能，但不强制要求编译器这样做。因此现在的编译器都是自己决定什么时候将局部变量存入寄存器，目前绝大部分的编译器会忽略这个关键字。</li></ul></li><li>静态存储持续性<ul><li>存储在数据段和BSS段。程序开始前建立，程序结束才销毁<ul><li>数据段：已初始化的非0的全局变量和已初始化为非0的static变量</li><li>BSS段：未初始化的全局变量和未初始化的static变量，初始化为0的全局变量和初始化为0的static变量</li><li>上述描述的证明程序及截图见下面有关注释。</li></ul></li><li>有外部链接、内部链接、无链接3种<ul><li>静态外部链接：全局变量（一个文件定义，其它文件<code>extern</code>引入声明)</li><li>静态内部链接：static 全局变量（只能定义所在的翻译单元使用）</li><li>静态无链接：static 局部变量（只能在定义所在的代码块内使用）</li></ul></li></ul></li><li>动态存储持续性<ul><li>用new申请的内存会一直存在，直到使用delete进行释放</li></ul></li><li>线程持续性：C++11引入<ul><li>使用<code>thread_local</code>声明，则其生命周期与所属的线程一样长</li></ul></li></ul><h2 id="有关-bss和-data注释"><a href="#有关-bss和-data注释" class="headerlink" title="有关.bss和.data注释"></a>有关.bss和.data注释</h2><p>bss段和data段存储变量验证：<br>程序：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 这段代码看起来不够规范，例如没有include &lt;iostream&gt;</span><br><span class="hljs-comment">* 也没有return 0;  但我是故意的,尽量不要引入多余参数和操作有利于我们分析</span><br><span class="hljs-comment">* 如果include &lt;iostream&gt; 会导致.bss段多出一个不知道干嘛的数据</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> global_not_init;<span class="hljs-comment">//.BSS</span><br><span class="hljs-type">int</span> global_init_not_zero=<span class="hljs-number">1</span>;<span class="hljs-comment">//.DATA</span><br><span class="hljs-type">int</span> global_init_zero=<span class="hljs-number">0</span>;<span class="hljs-comment">//.BSS</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> static_global_not_init;<span class="hljs-comment">//.BSS</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> static_global_init_not_zero=<span class="hljs-number">2</span>;<span class="hljs-comment">//.DATA</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> static_global_init_zero=<span class="hljs-number">0</span>;<span class="hljs-comment">//.BSS</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> static_local_not_init;<span class="hljs-comment">//.BSS</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> static_local_init_not_zero=<span class="hljs-number">3</span>;<span class="hljs-comment">//.DATA</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> static_local_init_zero=<span class="hljs-number">0</span>;<span class="hljs-comment">//.BSS</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>g++ -c bss.cpp -o bss.o</code><br><code>objdump -x bss.o</code> 结果如下：<br><img src="https://cdn.jsdelivr.net/gh/XingpanLuo/PictureBed/BlogImag202303251729547.png" alt="image.png"></p><div class="note note-success">            <p>总结：初始化为非0的全局变量和初始化为非0的static变量存在.data区，其它在.bss区</p>          </div><div class="note note-warning">            <p>bss段并不给该段的数据分配空间。程序运行后，系统给bss段的变量分配空间并自动初始化为0.<br>section table(节头表)中保存了bss段变量需要内存空间的大小总和，因此系统知道要分配多少内存该bss段。</p>          </div><p><code>objdump -h bss.o</code> .data段有3个int变量，故为12，.bss段有6个int故为24。（截图中数字为16进制）<br><img src="https://cdn.jsdelivr.net/gh/XingpanLuo/PictureBed/BlogImag202303251728729.png" alt="image.png"></p><h2 id="补充C-函数存储位置"><a href="#补充C-函数存储位置" class="headerlink" title="补充C++ 函数存储位置"></a>补充C++ 函数存储位置</h2><ul><li><p>C++ 中，函数的定义放在代码区，包括类成员函数和一般函数。</p></li><li><p>类的成员函数不计入内存空间，这里的成员函数包括一般的、static的、内联的等。</p></li><li><p>但类中存在存在虚函数时，就需要维护一个指向虚函数表的指针。虚函数表详细内容系列2再来讨论。</p></li></ul><p>一个疑惑：类中没有函数信息，那类是怎么找到函数的呢？</p><ul><li>这个问题本身就有问题，不是类找到函数，而是函数找到类</li><li>当我们执行<code>classA.func(a,b)</code>时，可以不那么严谨的认为执行了<code>func(&amp;classA,a,b)</code></li></ul><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>作用域，即一个变量可以被引用的范围</p><ul><li><p>文件作用域（全局作用域）：在函数和代码块之外声明的变量具有全局作用域</p></li><li><p>局部作用域：在函数内部声明的变量具有局部作用域</p></li><li><p>在代码块内声明的变量具有块作用域。如for循环中声明的临时变量</p></li><li><p>类作用域：在类内部声明的变量。</p><div class="note note-info">            <p>变量的作用域不会因为加了static或const而改变。<br>部分博客认为static将全局变量的作用域改变了，我认为这种描述不好，这种说法大概是认为该变量的作用域由“多个文件“变为了”一个文件“，但我更偏向于认为，”一个文件“就是最大的作用域，其余的文件也是需要extern引入声明后才获得了作用域的。<br>这颇有点咬文嚼字的感觉，但我依然喜欢以下的表述：<br>static将全局变量的链接性由外部链接缩小为内部链接，但作用域仍然是一个文件。<br>const也能将全局变量的链接性由外部链接缩小为内部链接。同样作用域仍然是一个文件</p>          </div><h2 id="链接性"><a href="#链接性" class="headerlink" title="链接性"></a>链接性</h2><p>多个文件间的共享性质称为链接性。</p></li><li><p>自动存储类型无链接性（自动变量没有链接性）</p></li><li><p>静态存储类型有外部链接、内部链接、无链接3种</p><ul><li>静态外部链接：全局变量（一个文件定义，其它文件<code>extern</code>引入声明)</li><li>静态内部链接：static 全局变量（只能定义所在的翻译单元使用）</li><li>静态无链接：static 局部变量（只能在定义所在的代码块内使用）</li></ul></li><li><p>动态存储类型无链接性。指针可以是自动的或静态的，但指针所指向的用new申请的区域没有讨论链接性的意义。</p></li></ul><table><thead><tr><th>存储描述</th><th>持续性</th><th>作用域</th><th>链接性</th><th>如何声明</th></tr></thead><tbody><tr><td>自动</td><td>自动</td><td>代码块</td><td>无</td><td>在代码块中</td></tr><tr><td>静态，无链接</td><td>静态</td><td>代码块</td><td>无</td><td>在代码块中,使用static</td></tr><tr><td>静态，内部链接</td><td>静态</td><td>文件</td><td>内部</td><td>函数和代码块之外，用static</td></tr><tr><td>静态，外部链接</td><td>静态</td><td>文件</td><td>外部</td><td>函数和代码块之外</td></tr></tbody></table><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><ul><li>static 对全局变量<ul><li>将其由外部链接性缩减为内部链接性</li></ul></li><li>static 对普通函数<ul><li>将其由外部链接性缩减为内部链接性。不能被其它文件链接到</li></ul></li><li>static 对局部变量<ul><li>将其存储持续性（生命周期）由自动变为静态。即该变量会一直存在直到程序结束。</li></ul></li><li>static 类成员变量：<ul><li>所有该类的对象共享一个变量</li><li>若初始化为非0，存储在data段；否则在BSS段</li><li><code>const static int</code>可以在类内进行初始化，其它都要在类外初始化。</li><li>类外初始化 方法： <code>类名::变量名=初值</code></li><li>访问方式：<code>类名::变量名。或者 对象.变量名</code> </li></ul></li><li>static 类成员函数<ul><li>管理static类成员变量</li><li><code>类名::成员函数 。对象.成员函数</code></li><li>没有this指针，只能调用static的数据和static成员函数。</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>cpp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 基础指令</title>
    <link href="/2023/03/25/Linux%20%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/"/>
    <url>/2023/03/25/Linux%20%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="近期使用到的命令"><a href="#近期使用到的命令" class="headerlink" title="近期使用到的命令"></a>近期使用到的命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#将a.cpp的内容复制到剪切板。结合windows与虚拟机的共享剪切板很好用</span><br><span class="hljs-built_in">cat</span> a.cpp | xclip -sel clip<br><span class="hljs-comment">#objdump 查看.o文件</span><br><span class="hljs-comment">#查看.data段,.bss段有多大</span><br>objdump -h a.o <br><span class="hljs-comment">#查看.data段和.bss段存放了哪些内容</span><br>objdump -x a.o<br><span class="hljs-comment">#将一篇很长的文件筛选出部分信息</span><br><span class="hljs-comment">#-E 为使用完全的正则表达式</span><br><span class="hljs-comment">#[system] 出现行及其下面两行。[system.cpu]出现的行及其下面两行</span><br>grep -E <span class="hljs-string">&quot;^\[(\w*)\]$|^\[(\w*)\.(\w*)\]$&quot;</span> -A 2 a.txt<br><br></code></pre></td></tr></table></figure><ul><li>whoami 显示当前登录的用户</li><li>hostname 显示当前机器的主机名</li><li>pwd 显示当前的工作目录绝对路劲<br><a name="goNBT"></a><h2 id="cd命令"><a href="#cd命令" class="headerlink" title="cd命令"></a>cd命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">.   当前目录<br>..  上一级目录<br>/   根目录<br>~   用户目录<br>-   上一次工作目录<br><br></code></pre></td></tr></table></figure><a name="OR86w"></a><h2 id="ls命令-打印目录文件及文件夹信息"><a href="#ls命令-打印目录文件及文件夹信息" class="headerlink" title="ls命令 : 打印目录文件及文件夹信息"></a>ls命令 : 打印目录文件及文件夹信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> [选项] [路径]<br><span class="hljs-built_in">ls</span> -a  显示隐藏文件<br><span class="hljs-built_in">ls</span> -l   显示详细信息<br><span class="hljs-built_in">ls</span> -hl  显示详细信息，包括人类可读的内存占用<br></code></pre></td></tr></table></figure><a name="COQAK"></a><h2 id="su-切换用户su-用户名"><a href="#su-切换用户su-用户名" class="headerlink" title="su 切换用户su - 用户名"></a>su 切换用户<code>su - 用户名</code></h2><a name="IHYp0"></a><h2 id="logout退出当前用户登录-logout"><a href="#logout退出当前用户登录-logout" class="headerlink" title="logout退出当前用户登录 logout"></a>logout退出当前用户登录 <code>logout</code></h2><a name="mUsEq"></a><h2 id="mkdir-新建文件夹"><a href="#mkdir-新建文件夹" class="headerlink" title="mkdir 新建文件夹"></a>mkdir 新建文件夹</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> [选项] [目录]<br><span class="hljs-built_in">mkdir</span> dir1创建文件夹<br><span class="hljs-built_in">mkdir</span> &#123;dir1,dir2,dir3&#125;创建多个文件夹<br><span class="hljs-built_in">mkdir</span> -p ./dir1/dir2/dir3 就算没有dir1,dir2，也可以递归创建出dir1,dir2,dir3<br><span class="hljs-built_in">mkdir</span> <span class="hljs-built_in">dir</span>&#123;1..10&#125;   创建10个文件夹dir1,dir2,...,dir10<br></code></pre></td></tr></table></figure><a name="wCQGf"></a><h2 id="touch-创建普通文件、修改文件事件"><a href="#touch-创建普通文件、修改文件事件" class="headerlink" title="touch 创建普通文件、修改文件事件"></a>touch 创建普通文件、修改文件事件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> [选项] [文件名]<br><span class="hljs-built_in">touch</span> a.txt b.py c.cpp<br><span class="hljs-built_in">touch</span> text&#123;a..z&#125;.txt  main&#123;1..3&#125;.cpp<br><span class="hljs-built_in">touch</span> -t 03160910 a.txt 修改文件的修改时间为3月16日9点10分<br></code></pre></td></tr></table></figure><a name="Pv1Vo"></a><h2 id="cp-复制"><a href="#cp-复制" class="headerlink" title="cp 复制"></a>cp 复制</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> [选项] 源文件 目标文件<br><span class="hljs-built_in">cp</span> a.txt b.cpp c.py ./dir/复制多个文件到目标文件夹<br><span class="hljs-built_in">cp</span> -r dir1 dir2 复制整个文件夹需要加上-r参数<br><span class="hljs-built_in">cp</span> -d a.out b.out 复制，保存软连接不变<br><span class="hljs-built_in">cp</span> -i 复制前询问，防止意外覆盖<br></code></pre></td></tr></table></figure><a name="jL2Dm"></a><h2 id="mv-移动文件、重命名文件"><a href="#mv-移动文件、重命名文件" class="headerlink" title="mv 移动文件、重命名文件"></a>mv 移动文件、重命名文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> [选项] [一个或多个源文件] 目标文件或目录<br><span class="hljs-built_in">mv</span> a.txt b.cpp ./dir/  移动一个或多个文件到目标目录<br><span class="hljs-built_in">mv</span> *.cpp ./dir/ <br><span class="hljs-built_in">mv</span> a.txt aa.txt 重命名文件<br></code></pre></td></tr></table></figure><a name="vsPL2"></a><h2 id="rm-删除"><a href="#rm-删除" class="headerlink" title="rm 删除"></a>rm 删除</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> [选项] 文件<br><span class="hljs-built_in">rm</span> a.txt 删除文件<br><span class="hljs-built_in">rm</span> a.txt b.txt<br><span class="hljs-built_in">rm</span> text*.txt  <br><span class="hljs-built_in">rm</span> -r <span class="hljs-built_in">dir</span> 递归删除目录<br><span class="hljs-built_in">rm</span> -d dir0 只能用来删除空文件夹<br><span class="hljs-built_in">rm</span> -f abb* 强制删除所有以abb开头的文件<br><span class="hljs-built_in">rm</span> -r -f ./*   强制删除当前目录下的所有内容<br></code></pre></td></tr></table></figure><a name="o0Mey"></a><h2 id="终端快捷键"><a href="#终端快捷键" class="headerlink" title="终端快捷键"></a>终端快捷键</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">ctrl+a 回到命令行开头<br>ctrl+e 命令行结尾<br>ctrl+l 清空<br>ctrl+d 从光标出删除一个字符<br></code></pre></td></tr></table></figure><a name="WfYQy"></a><h2 id="重定向符号"><a href="#重定向符号" class="headerlink" title="重定向符号"></a>重定向符号</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.读取文件内容，写入另一个文件中<br><span class="hljs-built_in">cat</span> src.txt &gt; dest.txt重定向输出覆盖<br><span class="hljs-built_in">cat</span> src.txt &gt;&gt; dest.txt 重定向追加<br>2.重定向写入符<br><span class="hljs-built_in">cat</span> &lt; src.txt  <br>将文本内容拆分<br>xargs -n 3 &lt; src.txt 限制每行只能输出3个字符<br><span class="hljs-built_in">cat</span> &gt;&gt; dest.txt &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">cat -n a.txt 显示行号，参数-n</span><br></code></pre></td></tr></table></figure><a name="StbNt"></a><h2 id="cat-查看文本内容"><a href="#cat-查看文本内容" class="headerlink" title="cat 查看文本内容"></a>cat 查看文本内容</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.查看文本内容<br><span class="hljs-built_in">cat</span> file.txt<br>-b 对非空行显示行号<br>-n 对所有行显示行号<br>2. 多个文件合并<br><span class="hljs-built_in">cat</span> file1.txt file2.txt &gt; file3.txt<br>3.非交互式编辑或追加内容<br><span class="hljs-built_in">cat</span> &gt;&gt; file.txt &lt;&lt; <span class="hljs-string">EOF 这是追加内容 EOF</span><br>4.清空文件内容<br><span class="hljs-built_in">cat</span> /dev/null &gt; file.txt<br><br></code></pre></td></tr></table></figure><a name="Q3qws"></a><h2 id="head-查看文件开头几行"><a href="#head-查看文件开头几行" class="headerlink" title="head 查看文件开头几行"></a>head 查看文件开头几行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">head</span> a.txt  查看前10行<br><span class="hljs-built_in">head</span> -n 5 a.txt 查看前5行<br><span class="hljs-built_in">head</span> -n -5 a.txt 查看倒数第5行之前所有<br></code></pre></td></tr></table></figure><a name="LYV36"></a><h2 id="tail-查看文件末尾几行"><a href="#tail-查看文件末尾几行" class="headerlink" title="tail 查看文件末尾几行"></a>tail 查看文件末尾几行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">能实时刷新显示a.txt的末尾变化<br><span class="hljs-built_in">tail</span> -F a.txt<br></code></pre></td></tr></table></figure><a name="llDrz"></a><h2 id="stat-查看文件详细信息"><a href="#stat-查看文件详细信息" class="headerlink" title="stat 查看文件详细信息"></a>stat 查看文件详细信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">查看文件详细信息<br>-f : 显示文件系统状态而非文件状态<br>-t : 以简洁方式输出<br></code></pre></td></tr></table></figure><a name="vaq5n"></a><h2 id="chmod-权限设置"><a href="#chmod-权限设置" class="headerlink" title="chmod 权限设置"></a>chmod 权限设置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">r,w,x : 读、写、执行<br>用户-用户所在组-所有<br>111=7 可读可写可执行<br>110=6 可读可写不可执行<br>010=2 只可写<br><span class="hljs-built_in">chmod</span> 777 a.txt <br></code></pre></td></tr></table></figure><a name="ZKXQ0"></a><h2 id="find-查找"><a href="#find-查找" class="headerlink" title="find 查找"></a>find 查找</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">find 路径 选项 文件名<br>搜索*.txt与*.cpp 但过滤a.*<br>-a 与；-o 或；-not 非<br>！！！注意空格！！！每个\(或\)的左后两边都要有空格。指令与指令之间也要有空格<br>find . \( -not -name <span class="hljs-string">&quot;a.*&quot;</span> \) -a \( -name <span class="hljs-string">&quot;*.txt&quot;</span> -o -name <span class="hljs-string">&quot;*.cpp&quot;</span> \) <br>根据正则表达式查找<br>find . -regex <span class="hljs-string">&quot;.*\(\.txt\|\.pdf\)$&quot;</span><br>-ok 执行后面的指令，并询问是否确定执行&#123;&#125; 中的是find找到的内容 <br>-<span class="hljs-built_in">exec</span> 执行后面的指令，不询问<br>注意以\;结尾<br>删除*.txt并逐一询问是否确定删除<br>find . -name <span class="hljs-string">&quot;*.txt&quot;</span> -ok <span class="hljs-built_in">rm</span> &#123;&#125; \;<br>合并所有*.txt到all.txt<br>find . -<span class="hljs-built_in">type</span> f -name <span class="hljs-string">&quot;*.txt&quot;</span> -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">cat</span> &#123;&#125; &gt; all.txt \;<br>-<span class="hljs-built_in">type</span> f 文件 -<span class="hljs-built_in">type</span> d 文件夹<br>将30天前的<span class="hljs-built_in">log</span>文件移动到old目录<br>find . -<span class="hljs-built_in">type</span> f -mtime +30 -name <span class="hljs-string">&quot;*.log&quot;</span> -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">cp</span> &#123;&#125; old \;<br>-atime 访问时间<br>-ctime 改变事件 +30超过30天，-5 5天内，5 正好5天前<br></code></pre></td></tr></table></figure><a name="Sr17b"></a><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">? 匹配一个任意字符<br>* 匹配0个或多个任意字符<br>[] 匹配中括号中的任意一个字符，例如[abc]匹配a或b或c<br>[a-m] [2-4] 匹配范围内的任意一个字符<br>[^] 逻辑非。例如[a^1-9].txt   匹配a.txt,但不匹配a1.txt,a2.txt<br>^ 匹配行首<br>$ 匹配行尾<br></code></pre></td></tr></table></figure><a name="arZ3I"></a><h2 id="grep-搜索匹配并打印"><a href="#grep-搜索匹配并打印" class="headerlink" title="grep 搜索匹配并打印"></a>grep 搜索匹配并打印</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">在文件内搜索匹配<br>grep <span class="hljs-string">&quot;match_pattern&quot;</span> file1.txt file2.txt<br>递归搜索当前目录及所有子目录中的问价<br>grep -r <span class="hljs-string">&quot;match_pattern&quot;</span><br>正则匹配输出以数字开头的所有行<br>grep <span class="hljs-string">&quot;^[0-9].*&quot;</span> file.txt<br></code></pre></td></tr></table></figure><a name="HEj5C"></a><h2 id="tar-压缩和解压缩"><a href="#tar-压缩和解压缩" class="headerlink" title="tar 压缩和解压缩"></a>tar 压缩和解压缩</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#=======================&quot;.tar&quot;格式=========================</span><br><span class="hljs-comment">#打包不会压缩</span><br>tar -cvf anaconda-ks.cfg.tar anaconda-ks.cfg<br><span class="hljs-comment">#解打包到当前目录</span><br>tar -xvf anaconda-ks.cfg.tar<br><span class="hljs-comment">#解打包到指定目录</span><br>tar -xvf anaconda-ks.cfg.tar -C /testdir/<br><br><span class="hljs-comment">#=====================&quot;.tar.gz&quot;格式=====================</span><br><span class="hljs-comment">#把/tmp/目录直接打包并压缩为&quot;.tar.gz&quot;格式</span><br>tar -zcvf tmp.tar.gz /tmp/<br><span class="hljs-comment">#解压缩并解打包&quot;.tar.gz&quot;格式文件</span><br>tar -zxvf tmp.tar.gz<br></code></pre></td></tr></table></figure><a name="KsbWb"></a><h2 id="cut-分割"><a href="#cut-分割" class="headerlink" title="cut 分割"></a>cut 分割</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">a.txt的每行的第4-7个字符<br><span class="hljs-built_in">cut</span> -c 4-7 a.txt<br><span class="hljs-built_in">cut</span> -c 5,6 a.txt 每行的第5个和第6个字符<br><span class="hljs-built_in">cut</span> -c -6 a.txt 每行的前6个字符<br>a.txt每行用:分割。取出分割结果的1-3个<br><span class="hljs-built_in">cut</span> -d <span class="hljs-string">&quot;:&quot;</span> -f 1-3 a.txt<br><span class="hljs-built_in">cut</span> -d <span class="hljs-string">&quot;:&quot;</span> -f 3- a.txt 分割结果的第三个到最后<br></code></pre></td></tr></table></figure><a name="hMHfX"></a><h2 id="paste-合并"><a href="#paste-合并" class="headerlink" title="paste 合并"></a>paste 合并</h2>与cut相反<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">两个文件按列合并<br><span class="hljs-built_in">paste</span> a.txt b.txt<br>按列合并，并用 : 连接<br><span class="hljs-built_in">paste</span> -d <span class="hljs-string">&quot;:&quot;</span> a.txt b.txt<br></code></pre></td></tr></table></figure><a name="D7hDp"></a><h2 id="sort-排序"><a href="#sort-排序" class="headerlink" title="sort 排序"></a>sort 排序</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.对文件进行排序<br><span class="hljs-built_in">sort</span> a.txt 数字排在前面，字母排在后面<br><span class="hljs-built_in">sort</span> -r a.txt 逆序（从大到小）<br>2. 对文件每行按照第一个字符按照数字排序。如果第一个字符不是数字，就认为是数字0<br><span class="hljs-built_in">sort</span> -n a.txt 默认从小到大排序<br><span class="hljs-built_in">sort</span> -nr a.txt 从大到小排序<br>3.对排序结果去重<br><span class="hljs-built_in">sort</span> -u a.txt<br>4.指定分割符号,指定区域进行排序<br><span class="hljs-built_in">sort</span> -n -t <span class="hljs-string">&quot;.&quot;</span> -k 4 ip.txt<br></code></pre></td></tr></table></figure><a name="fOoXm"></a><h2 id="uniq-去重"><a href="#uniq-去重" class="headerlink" title="uniq 去重"></a>uniq 去重</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.去除连续出现的行<br><span class="hljs-built_in">uniq</span> a.txt<br><span class="hljs-built_in">uniq</span> -c a.txt 显示重复出现的次数<br>2.一般结合<span class="hljs-built_in">sort</span>使用<br><span class="hljs-built_in">sort</span> -n a.txt | <span class="hljs-built_in">uniq</span> -c<br>3.找出只出现一次的行<br><span class="hljs-built_in">sort</span> -n a.txt | <span class="hljs-built_in">uniq</span> -c -u<br></code></pre></td></tr></table></figure><a name="v5hCo"></a><h2 id="wc-单词统计"><a href="#wc-单词统计" class="headerlink" title="wc 单词统计"></a>wc 单词统计</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.统计文件的行数<br><span class="hljs-built_in">wc</span> -l a.txt<br>2.统计单词数量<br><span class="hljs-built_in">wc</span> -w a.txt<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;test1 test2&quot;</span> | <span class="hljs-built_in">wc</span> -w 结果为2两个单词<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;好 啊 不好&quot;</span> | <span class="hljs-built_in">wc</span> -w 结果为3<br>3.统计字符数(包括结尾的$符号<br><span class="hljs-built_in">wc</span> -m a.txt<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;test&quot;</span> | <span class="hljs-built_in">wc</span> -m  结果为5<br>4.输出最长行的字符数<br><span class="hljs-built_in">cat</span> a.txt | <span class="hljs-built_in">wc</span> -L<br></code></pre></td></tr></table></figure><a name="JwKbv"></a><h2 id="tr-从标准输入中替换、所见或删除字符，将结果写到标准输出"><a href="#tr-从标准输入中替换、所见或删除字符，将结果写到标准输出" class="headerlink" title="tr 从标准输入中替换、所见或删除字符，将结果写到标准输出"></a>tr 从标准输入中替换、所见或删除字符，将结果写到标准输出</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">1. 替换一部分字符<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;my name is lumos&quot;</span> | <span class="hljs-built_in">tr</span> <span class="hljs-string">&#x27;[a-z]&#x27;</span> <span class="hljs-string">&#x27;[A-Z]&#x27;</span><br><span class="hljs-comment">#MY NAME IS LUMOS</span><br>2.删除一部分字符 -d 选项<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;my name is lumos and i an 21 years old&quot;</span> | <span class="hljs-built_in">tr</span> -d <span class="hljs-string">&#x27;a-z&#x27;</span><br><span class="hljs-comment">#21</span><br>3.把文件中的内容进行替换(把文件当作标准输入<br><span class="hljs-built_in">tr</span> <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-string">&#x27;A&#x27;</span> &lt; a.txt<br>4.去除连续重复字符 -s选项<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;iii am lllumoos&quot;</span> | <span class="hljs-built_in">tr</span> -s  <span class="hljs-string">&#x27;ialo&#x27;</span><br><span class="hljs-comment">#i am lumos</span><br></code></pre></td></tr></table></figure><a name="UZMmi"></a><h2 id="xargs-管道命令，构造参数等"><a href="#xargs-管道命令，构造参数等" class="headerlink" title="xargs 管道命令，构造参数等"></a>xargs 管道命令，构造参数等</h2>简单的说就是，把其它命令给他的数据，传递给它后面的命令作为参数<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">a.txt:<br>1 2<br>3 4 5<br>1.多行连接输出<br>xargs &lt; a.txt<br><span class="hljs-comment">#1 2 3 4 5 </span><br>2.-n 每行最多输出原来的n行<br>xargs -n &lt; a.txt<br>3. -d 分割<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;a,b,c&quot;</span> | xargs -d <span class="hljs-string">&quot;,&quot;</span> -n 2<br>3. -i &#123;&#125;替代传输的数据<br>将当前所有的txt文件，移动到<span class="hljs-built_in">dir</span>目录<br>find . -name <span class="hljs-string">&quot;*.txt&quot;</span> | xargs -i <span class="hljs-built_in">mv</span> &#123;&#125; <span class="hljs-built_in">dir</span>/<br>4. -I 用字符串替换数据<br>find . -name <span class="hljs-string">&quot;*.txt&quot;</span> | xargs -I alltxt <span class="hljs-built_in">mv</span> alltxt <span class="hljs-built_in">dir</span>/<br></code></pre></td></tr></table></figure><a name="j9Hxv"></a><h2 id="join-合并"><a href="#join-合并" class="headerlink" title="join 合并"></a>join 合并</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">只能对排序好的文件使用<br>将两个文件，按照某列为匹配字段进行合并<br>依照a文件的ID1段和b文件ID2段进行合并,指定分隔符为<span class="hljs-string">&quot; &quot;</span> <br><span class="hljs-built_in">join</span> -1 ID1 -2 ID2 -t <span class="hljs-string">&quot; &quot;</span> a.txt b.txt &gt; c.txt<br>a.txt<br>zhou 2000 1<br>li 2500 2<br>wan 2000 2<br>zhan 2600 2<br>b.txt <br>zhou c 1<br>zhan java 2<br>wan php 3<br><br>c.txt<br>1 zhou 2000 zhou c<br>2 li 2500 zhan java<br>2 wan 2000 zhan java<br>2 zhan 2600 zhan java<br></code></pre></td></tr></table></figure><a name="pi9eA"></a><h2 id="comm-比较文件内容"><a href="#comm-比较文件内容" class="headerlink" title="comm 比较文件内容"></a>comm 比较文件内容</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">1. 比较文件内容<br><span class="hljs-built_in">comm</span> a.txt b.txt<br>-1 不输出文件1特有的行<br>-2 不输出文件2特有的行<br>-3 不输出两个文件共有的行<br>2.只显示两个文件共有部分<br><span class="hljs-built_in">comm</span> -12 a.txt b.txt<br></code></pre></td></tr></table></figure><a name="EI20q"></a><h2 id="diff-比较文件不同"><a href="#diff-比较文件不同" class="headerlink" title="diff 比较文件不同"></a>diff 比较文件不同</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">diff a.txt b.txt<br>-c 上下文模式，显示全部内文，并标出不同之处<br>-u 统一模式，以合并的方式来显示文件内容的不同<br></code></pre></td></tr></table></figure><a name="peBXG"></a><h2 id="df-查看磁盘占用情况"><a href="#df-查看磁盘占用情况" class="headerlink" title="df 查看磁盘占用情况"></a>df 查看磁盘占用情况</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span>是disk free的缩写<br><span class="hljs-built_in">df</span> [选项] 文件（磁盘）<br>1.显示磁盘使用情况<br><span class="hljs-built_in">df</span><br>2. 以inode模式显示<br><span class="hljs-built_in">df</span> -i<br>3.列出文件系统的类型<br><span class="hljs-built_in">df</span> -T<br></code></pre></td></tr></table></figure><a name="uoXcJ"></a><h2 id="du-查看文件和目录的占用情况"><a href="#du-查看文件和目录的占用情况" class="headerlink" title="du 查看文件和目录的占用情况"></a>du 查看文件和目录的占用情况</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">-a 显示目录中所有文件的大小<br>-h 以K,M,G为单位，提高信息可读性<br>-c 显示综合<br><span class="hljs-built_in">du</span> -h a.txt 文件a.txt的占用<br><span class="hljs-built_in">du</span> -ch a.txt b.txt 两个文件的占用及其总和<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
